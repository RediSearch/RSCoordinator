version: 2.1

commands:
  early-returns:
    steps:
      - run:
          name: Early return if this is a docs build
          command: |
            if [[ $CIRCLE_BRANCH == *docs ]]; then
              echo "Identifies as documents PR, no testing required."
              circleci step halt
            fi
      - run:
          name: Early return if this branch should ignore CI
          command: |
            if [[ $CIRCLE_BRANCH == *noci ]]; then
              echo "Identifies as actively ignoring CI, no testing required."
              circleci step halt
            fi

  early-return-for-forked-pull-requests:
    description: >-
      If this build is from a fork, stop executing the current job and return success.
      This is useful to avoid steps that will fail due to missing credentials.
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [[ -n "$CIRCLE_PR_NUMBER" ]]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi

  setup-executor:
    steps:
      - run:
          name: Setup executor
          command: |
            apt-get -qq update
            apt-get -q install -y git openssh-client curl ca-certificates make tar gzip
            bash <(curl -fsSL https://get.docker.com)
      - setup_remote_docker:
          version: 20.10.2
          docker_layer_caching: true

  checkout-all:
    steps:
      - checkout
      - run:
          name: Checkout submodules
          command: git submodule update --init --recursive

  setup-automation:
    steps:
      - run:
          name: Setup automation
          command: |
            (mkdir -p deps; cd deps; git clone https://github.com/RedisLabsModules/readies.git)
            FORCE=1 ./deps/readies/bin/getpy2

  install-prerequisites:
    parameters:
      redis_version:
        type: string
        default: "6"
      getredis_params:
        type: string
        default: ""
    steps:
      - setup-automation
      - run:
          name: System setup
          command: ./system-setup.py
      - run:
          name: Install Redis
          command: |
            bash -l -c "python2 ./deps/readies/bin/getredis -v <<parameters.redis_version>> --force <<parameters.getredis_params>>"
            redis-server --version

  save-tests-logs:
    steps:
      - run:
          name: Cleanup test log dir
          command: |
            if [[ -d tests/flow/logs ]]; then
              cd tests/flow/logs
              rm -f *.aof *.rdb
            fi
      - store_artifacts:
          path: tests/flow/logs

  persist-artifacts:
    steps:
      - early-return-for-forked-pull-requests
      - persist_to_workspace:
          root: bin/
          paths:
            - artifacts/snapshots/*.zip
            - artifacts/snapshots/*.tgz
            - artifacts/snapshots/*.tar
            - artifacts/*.zip
            - artifacts/*.tgz
            - artifacts/*.tar

  build-steps:
    parameters:
      compat-search:
        type: boolean
        default: false
    steps:
      - checkout-all
      - install-prerequisites
      - run:
          name: Submodule checkout
          command: |
            if [[ ! -e src/dep/RediSearch/CMakeLists.txt ]]; then
              git submodule update --init --recursive
            fi
            if [[ <<parameters.compat-search>> == true ]]; then
              pushd src/dep/RediSearch
              if [[ -n $(git ls-remote --heads origin $CIRCLE_BRANCH) ]]; then
                git checkout $CIRCLE_BRANCH
                git pull --recurse-submodules
              fi
              popd > /dev/null
            fi
      - run:
          name: Configuration & UV Build
          command: ./.circleci/configure.sh
      - run:
          name: Main Build
          command: ./.circleci/build.sh
      - run:
          name: Test
          command: ./.circleci/test.sh
      - run:
          name: Package
          command: |
            mkdir -p artifacts
            ./.circleci/package.sh
            ./.circleci/package-light.sh
            ./.circleci/package-light-rce.sh
      - persist_to_workspace:
          root: artifacts
          paths:
            - '*.zip'
            - '*.tgz'
            - snapshots/*.zip
            - snapshots/*.tgz

jobs:
  build:
    parameters:
      platform:
        type: string
        default: debian
      compat-search:
        type: boolean
        default: false
    docker:
      - image: redisfab/rmbuilder:6.2.4-x64-<<parameters.platform>>
    steps:
      - build-steps:
          compat-search: <<parameters.compat-search>>

  deploy-snapshots:
    docker:
      - image: redisfab/rmbuilder:6.2.4-x64-buster
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Deploy Snapshots to S3
          command: |
            cd /workspace/snapshots
            for f in *.zip *.tgz; do
              aws s3 cp $f s3://redismodules/$PACKAGE_NAME/snapshots/ --acl public-read
            done

  deploy-release:
    docker:
      - image: redisfab/rmbuilder:6.2.4-x64-buster
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Deploy Releases to S3
          command: |
            cd /workspace
            for f in *.zip *.tgz; do
              aws s3 cp $f s3://redismodules/$PACKAGE_NAME/ --acl public-read
            done

  release-automation:
    docker:
      - image: redisfab/rmbuilder:6.2.4-x64-buster
    steps:
      - checkout
      - setup-automation
      - run:
          name: Run QA Automation
          command: MODULE_VERSION=$CIRCLE_TAG VERBOSE=1 TEST=release ./tests/qa/run
      - run:
          name: Run QA Automation (RediSearch Light)
          command: MODULE_VERSION=$CIRCLE_TAG VERBOSE=1 TEST=release LIGHT=1 ./tests/qa/run

  nightly-automation:
    docker:
      - image: redisfab/rmbuilder:6.2.4-x64-buster
    steps:
      - checkout
      - setup-automation
      - run:
          name: Run QA Automation
          command: MODULE_VERSION=$CIRCLE_BRANCH VERBOSE=1 TEST=nightly QUICK=1 ./tests/qa/run
      - run:
          name: Run QA Automation (RediSearch Light)
          command: MODULE_VERSION=$CIRCLE_BRANCH VERBOSE=1 TEST=nightly QUICK=1 LIGHT=1 ./tests/qa/run

#----------------------------------------------------------------------------------------------------------------------------------

on-any-branch: &on-any-branch
  filters:
    branches:
      only: /.*/
    tags:
      only: /.*/

never: &never
  filters:
    branches:
      ignore: /.*/
    tags:
      ignore: /.*/

on-master: &on-master
  filters:
    branches:
      only: master
    tags:
      ignore: /.*/

on-integ-branch: &on-integ-branch
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
    tags:
      ignore: /.*/

not-on-integ-branch: &not-on-integ-branch
  filters:
    branches:
      ignore:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
    tags:
      ignore: /.*/

on-version-tags: &on-version-tags
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^v[0-9].*/

on-integ-and-version-tags: &on-integ-and-version-tags
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
    tags:
      only: /^v[0-9].*/


#----------------------------------------------------------------------------------------------------------------------------------

workflows:
  version: 2
  default_flow:
    jobs:
      - build:
          name: pr-build
          compat-search: false
          platform: bionic
          <<: *not-on-integ-branch
      - build:
          name: int-build-<< matrix.platform >>
          compat-search: true
          matrix:
            alias: int-builds
            parameters:
              platform: [focal, bionic, xenial, centos7, centos8]
          <<: *on-integ-branch
      - build:
          name: version-build-<< matrix.platform >>
          compat-search: false
          matrix:
            alias: version-builds
            parameters:
              platform: [focal, bionic, xenial, centos7, centos8]
          <<: *on-version-tags
      - deploy-snapshots:
          context: common
          requires:
            - int-builds
          <<: *on-integ-branch
      - deploy-release:
          context: common
          requires:
            - version-builds
          <<: *on-version-tags
      - release-automation:
          context: common
          requires:
            - deploy-release
          <<: *on-version-tags

  nightly:
    triggers:
      - schedule:
          cron: "07 20 * * *"
          filters:
            branches:
              only: master
    jobs:
      - build:
          name: nightly-build-<< matrix.platform >>
          compat-search: true
          matrix:
            parameters:
              platform: [bionic, centos7]
